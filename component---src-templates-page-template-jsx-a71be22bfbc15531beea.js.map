{"version":3,"file":"component---src-templates-page-template-jsx-a71be22bfbc15531beea.js","mappings":"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","sources":["webpack://peligro-nueva-era/./node_modules/url-join/lib/url-join.js","webpack://peligro-nueva-era/./src/components/MainContainer/MainContainer.jsx","webpack://peligro-nueva-era/./src/components/SEO/SEO.jsx","webpack://peligro-nueva-era/./src/components/Sidebar/WidgetContainer.jsx","webpack://peligro-nueva-era/./src/components/Sidebar/WidgetTitle.jsx","webpack://peligro-nueva-era/./src/components/Tag/Tag.jsx","webpack://peligro-nueva-era/./src/components/Sidebar/WidgetCategory.jsx","webpack://peligro-nueva-era/./src/components/Sidebar/WidgetTag.jsx","webpack://peligro-nueva-era/./src/components/Sidebar/WidgetLatestPosts.jsx","webpack://peligro-nueva-era/./src/components/Sidebar/WidgetLinks.jsx","webpack://peligro-nueva-era/./src/components/Sidebar/WidgetSearch.jsx","webpack://peligro-nueva-era/./src/components/Sidebar/Sidebar.jsx","webpack://peligro-nueva-era/./src/components/Page/Page.jsx","webpack://peligro-nueva-era/./src/templates/page-template.jsx"],"sourcesContent":["(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React from \"react\";\r\nimport \"./MainContainer.scss\";\r\n\r\nconst MainContainer = ({ content, sidebar }) => (\r\n  <section className=\"main-container container\">\r\n    <div className=\"content-wrapper padding-top-half padding-bottom-2\">\r\n      {content}\r\n    </div>\r\n    <div className=\"sidebar-wrapper padding-top-half padding-bottom-2\">\r\n      {sidebar}\r\n    </div>\r\n  </section>\r\n);\r\n\r\nexport default MainContainer;\r\n","import React, { Component } from \"react\";\r\nimport { getSrc } from \"gatsby-plugin-image\";\r\nimport Helmet from \"react-helmet\";\r\nimport urljoin from \"url-join\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nclass SEO extends Component {\r\n  render() {\r\n    const { postNode, postPath, postSEO } = this.props;\r\n    let title;\r\n    let description;\r\n    let keywords;\r\n    let image = \"\";\r\n    let postURL;\r\n    if (postSEO) {\r\n      const postMeta = postNode.frontmatter;\r\n      ({ title } = postMeta);\r\n      description = postMeta.description\r\n        ? postMeta.description\r\n        : postNode.excerpt;\r\n\r\n      keywords = postMeta.keywords;\r\n\r\n      if (postMeta.cover) {\r\n        image = getSrc(postMeta.cover);\r\n      }\r\n\r\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\r\n    } else {\r\n      title = config.siteTitle;\r\n      description = config.siteDescription;\r\n      image = config.siteLogo;\r\n    }\r\n\r\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\r\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\r\n    const schemaOrgJSONLD = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"WebSite\",\r\n        url: blogURL,\r\n        name: title,\r\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\r\n      },\r\n    ];\r\n    if (postSEO) {\r\n      schemaOrgJSONLD.push(\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BreadcrumbList\",\r\n          itemListElement: [\r\n            {\r\n              \"@type\": \"ListItem\",\r\n              position: 1,\r\n              item: {\r\n                \"@id\": postURL,\r\n                name: title,\r\n                image,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BlogPosting\",\r\n          url: blogURL,\r\n          name: title,\r\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\r\n          headline: title,\r\n          image: {\r\n            \"@type\": \"ImageObject\",\r\n            url: image,\r\n          },\r\n          description,\r\n        }\r\n      );\r\n    }\r\n    return (\r\n      <Helmet>\r\n        {/* General tags */}\r\n        <meta name=\"description\" content={description} />\r\n        <meta name=\"image\" content={image} />\r\n        {keywords && <meta name=\"keywords\" content={keywords} />}\r\n\r\n        {/* Schema.org tags */}\r\n        <script type=\"application/ld+json\">\r\n          {JSON.stringify(schemaOrgJSONLD)}\r\n        </script>\r\n\r\n        {/* OpenGraph tags */}\r\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\r\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n        <meta property=\"og:title\" content={title} />\r\n        <meta property=\"og:description\" content={description} />\r\n        <meta property=\"og:image\" content={image} />\r\n        <meta\r\n          property=\"fb:app_id\"\r\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\r\n        />\r\n\r\n        {/* Twitter Card tags */}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta\r\n          name=\"twitter:creator\"\r\n          content={config.userTwitter ? config.userTwitter : \"\"}\r\n        />\r\n        <meta name=\"twitter:title\" content={title} />\r\n        <meta name=\"twitter:description\" content={description} />\r\n        <meta name=\"twitter:image\" content={image} />\r\n      </Helmet>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SEO;\r\n","import React from \"react\";\r\n\r\nconst WidgetContainer = ({ extraClass = \"\", children }) => (\r\n  <aside className={`${extraClass} padding-top padding-bottom`}>\r\n    {children}\r\n  </aside>\r\n);\r\n\r\nexport default WidgetContainer;\r\n","import React from \"react\";\r\n\r\nconst WidgetTitle = ({ title }) => (\r\n  <h3 className=\"text-uppercase\">\r\n    <small>{title}</small>\r\n  </h3>\r\n);\r\n\r\nexport default WidgetTitle;\r\n","import React from \"react\";\r\nimport AutoLink from \"../AutoLink/AutoLink\";\r\nimport { getTagPath } from \"../../utils/helpers\";\r\n\r\nconst Tag = ({ content }) => (\r\n  <AutoLink\r\n    key={content}\r\n    to={getTagPath(content)}\r\n    className=\"inline-block small-text \r\n      border border-color-light-grey padding-left-half padding-right-half\"\r\n  >\r\n    <span>{content}</span>\r\n  </AutoLink>\r\n);\r\n\r\nexport default Tag;\r\n","import React from \"react\";\r\nimport AutoLink from \"../AutoLink/AutoLink\";\r\nimport WidgetContainer from \"./WidgetContainer\";\r\nimport WidgetTitle from \"./WidgetTitle\";\r\nimport { getCategoryPath } from \"../../utils/helpers\";\r\nimport config from \"../../../data/SiteConfig\";\r\nimport Tag from \"../Tag/Tag\";\r\n\r\nconst WidgetCategory = ({ categoryList }) => (\r\n  <WidgetContainer extraClass=\"categories-container\">\r\n    <WidgetTitle title={config.categoryWidgetTitle} />\r\n    <div>\r\n      {categoryList.map((category) => (\r\n        <AutoLink\r\n          key={category}\r\n          to={getCategoryPath(category)}\r\n          className=\"small-text border-bottom border-color-light-grey padding-top-half padding-bottom-half\"\r\n        >\r\n        {category + ' | '}\r\n        </AutoLink>\r\n      ))}\r\n    </div>\r\n  </WidgetContainer>\r\n);\r\n\r\nexport default WidgetCategory;\r\n","import React from \"react\";\r\nimport Tag from \"../Tag/Tag\";\r\nimport WidgetContainer from \"./WidgetContainer\";\r\nimport WidgetTitle from \"./WidgetTitle\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nconst WidgetTag = ({ tagList }) => (\r\n  <WidgetContainer extraClass=\"categories-container\">\r\n    <WidgetTitle title={config.tagWidgetTitle} />\r\n    <div>\r\n      {tagList.map((tag) => (\r\n        <Tag key={tag} content={tag} />\r\n      ))}\r\n    </div>\r\n  </WidgetContainer>\r\n);\r\n\r\nexport default WidgetTag;\r\n","import React from \"react\";\r\nimport AutoLink from \"../AutoLink/AutoLink\";\r\nimport WidgetContainer from \"./WidgetContainer\";\r\nimport WidgetTitle from \"./WidgetTitle\";\r\nimport { getPostList } from \"../../utils/helpers\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nconst WidgetLatesPosts = ({ latestPostEdges }) => {\r\n  const postList = getPostList(latestPostEdges);\r\n\r\n  return (\r\n    <WidgetContainer extraClass=\"latest-posts-container\">\r\n      <WidgetTitle title={config.latestPostsWidgetTitle} />\r\n      <div>\r\n        {postList.map((post) => (\r\n          <AutoLink\r\n            key={post.title}\r\n            to={post.slug}\r\n            className=\"block border-bottom border-color-light-grey padding-top-half padding-bottom-half\"\r\n          >\r\n            <span>{post.title}</span>\r\n          </AutoLink>\r\n        ))}\r\n      </div>\r\n    </WidgetContainer>\r\n  );\r\n};\r\n\r\nexport default WidgetLatesPosts;\r\n","import React from \"react\";\r\nimport AutoLink from \"../AutoLink/AutoLink\";\r\nimport WidgetContainer from \"./WidgetContainer\";\r\nimport WidgetTitle from \"./WidgetTitle\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nconst WidgetLinks = ({ links }) => (\r\n  <>\r\n    {links && links.length > 0 && (\r\n      <WidgetContainer extraClass=\"categories-container\">\r\n        <WidgetTitle title={config.linksWidgetTitle} />\r\n        <div>\r\n          {links.map((link) => (\r\n            <AutoLink\r\n              key={link.label}\r\n              to={link.url}\r\n              className=\"block border-bottom border-color-light-grey padding-top-half padding-bottom-half\"\r\n            >\r\n              <span>{link.label}</span>\r\n            </AutoLink>\r\n          ))}\r\n        </div>\r\n      </WidgetContainer>\r\n    )}\r\n  </>\r\n);\r\n\r\nexport default WidgetLinks;\r\n","import React, { Component } from \"react\";\r\nimport WidgetContainer from \"./WidgetContainer\";\r\nimport WidgetTitle from \"./WidgetTitle\";\r\nimport config from \"../../../data/SiteConfig\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nclass WidgetSearch extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        {config.hasSearch && (\r\n          <WidgetContainer extraClass=\"search-container\">\r\n            <WidgetTitle title={config.searchWidgetTitle} />\r\n            <form className=\"margin-bottom-none\" action=\"/search/\" method=\"get\">\r\n              <div className=\"container-full row padding-none margin-bottom-none\">\r\n                <div className=\"padding-none padding-right-half col-xs-10\">\r\n                  <input\r\n                    className=\"margin-bottom-none\"\r\n                    type=\"text\"\r\n                    name=\"q\"\r\n                    placeholder={config.searchWidgetPlaceHolder}\r\n                    required\r\n                    spellCheck=\"false\"\r\n                  />\r\n                </div>\r\n                <div className=\"padding-none padding-left-half col-xs-2\">\r\n                  <button type=\"submit\" className=\"btn btn-primary\">\r\n                    <FontAwesomeIcon\r\n                      icon={[\"fas\", \"search\"]}\r\n                      style={{ color: \"#FFFFFF\" }}\r\n                    />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </WidgetContainer>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WidgetSearch;\r\n","import React from \"react\";\r\nimport WidgetCategory from \"./WidgetCategory\";\r\nimport WidgetTag from \"./WidgetTag\";\r\nimport WidgetLatestPosts from \"./WidgetLatestPosts\";\r\nimport WidgetLinks from \"./WidgetLinks\";\r\nimport WidgetSearch from \"./WidgetSearch\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nconst Sidebar = ({ tagList, categoryList, latestPostEdges, links }) => {\r\n  return (\r\n    <aside\r\n      className={`sidebar-container width-full ${\r\n        config.sidebarSticky ? \"height-full\" : \"\"\r\n      }`}\r\n    >\r\n      <WidgetSearch />\r\n\r\n      {latestPostEdges && (\r\n        <WidgetLatestPosts latestPostEdges={latestPostEdges} />\r\n      )}\r\n\r\n      {categoryList && <WidgetCategory categoryList={categoryList} />}\r\n\r\n      {tagList && <WidgetTag tagList={tagList} />}\r\n\r\n      {links && (\r\n        <div className=\"position-sticky top-zero\">\r\n          <WidgetLinks links={links} />\r\n        </div>\r\n      )}\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\n\r\nconst Page = ({ postNode, slug }) => {\r\n  const post = postNode.frontmatter;\r\n  if (!post.id) {\r\n    post.id = slug;\r\n  }\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <div\r\n        className=\"padding-top padding-bottom\"\r\n        dangerouslySetInnerHTML={{ __html: postNode.html }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../layout\";\r\nimport Header from \"../components/Header/Header\";\r\nimport MainContainer from \"../components/MainContainer/MainContainer\";\r\nimport Sidebar from \"../components/Sidebar/Sidebar\";\r\nimport Page from \"../components/Page/Page\";\r\nimport SEO from \"../components/SEO/SEO\";\r\nimport config from \"../../data/SiteConfig\";\r\n\r\nconst PageTemplate = ({ data, pageContext }) => {\r\n  const { slug, tagList, categoryList, latestPostEdges } = pageContext;\r\n  const postNode = data.markdownRemark;\r\n  const title = postNode.frontmatter.title;\r\n  const content = <Page postNode={postNode} slug={slug} />;\r\n  const sidebar = (\r\n    <Sidebar\r\n      tagList={tagList}\r\n      categoryList={categoryList}\r\n      latestPostEdges={latestPostEdges}\r\n      links={config.sidebarLinks}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Layout>\r\n      <Helmet>\r\n        <title>{`${title} - ${config.siteTitle}`}</title>\r\n      </Helmet>\r\n      <SEO postPath={slug} postNode={postNode} postSEO />\r\n      <Header title={title} />\r\n      <MainContainer content={content} sidebar={sidebar} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default PageTemplate;\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query BlogPageBySlug($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      html\r\n      timeToRead\r\n      excerpt\r\n      frontmatter {\r\n        title\r\n        description\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","content","sidebar","className","SEO","render","title","description","keywords","postURL","this","props","postNode","postPath","postSEO","image","postMeta","frontmatter","excerpt","cover","getSrc","urljoin","config","blogURL","schemaOrgJSONLD","url","name","alternateName","itemListElement","position","item","headline","type","JSON","stringify","property","Component","extraClass","children","AutoLink","key","to","getTagPath","categoryList","map","category","getCategoryPath","tagList","tag","latestPostEdges","postList","getPostList","post","slug","links","link","label","WidgetSearch","action","method","placeholder","required","spellCheck","icon","style","color","WidgetLatestPosts","id","dangerouslySetInnerHTML","__html","html","data","pageContext","markdownRemark","Sidebar","Helmet","Header","MainContainer"],"sourceRoot":""}